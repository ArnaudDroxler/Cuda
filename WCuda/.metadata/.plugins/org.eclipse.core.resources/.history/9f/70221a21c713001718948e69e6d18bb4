#include <iostream>

#include "Device.h"
#include "Slice.h"

using std::cout;
using std::endl;


extern __global__ void slice();


Slice::Slice(const Grid& grid)
    {

    this->dg = grid.dg;
    this->db = grid.db;

    this->sizeResultGM = sizeof(float);
    this->sizeTabSM = db.x * sizeof(float);

    this->ptrResult = null;
    Device::malloc(&ptrDevResult, sizeResultGM);
    Device::memset(ptrDevResult, 0,sizeResultGM);



    }

Slice::~Slice(void)
    {
    Device::free(ptrDevResult);
    }


void Slice::run()
    {
    Device::lastCudaError("slice (before)"); // temp debug
    slice<<<dg,db, sizeTabSM >>>(ptrDevResult,NB_SLICE); // assynchrone
    Device::lastCudaError("slice (after)"); // temp debug

    //Device::synchronize(); // Temp,debug, only for printf in GPU

    Device::memcpyDToH(ptrResult, ptrDevResult, sizeOctet); // barriere synchronisation implicite

    print("Reslut : %d",&ptrResult);
    }

