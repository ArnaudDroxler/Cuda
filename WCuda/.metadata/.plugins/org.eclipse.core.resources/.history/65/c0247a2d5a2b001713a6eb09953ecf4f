#include "Indice2D.h"
#include "Indice1D.h"
#include "reductionADD.h"



__device__ void reductionIntraThread(int* TAB_SM, int* ptrTabPixelsGM, uint lenght);

__device__ void reductionInterBlock(int* TAB_SM, int* ptrHistogrammeGM);



__global__ void histogramme(int* ptrTabIn, uint lenght, int* ptrHistogrammeGM)
    {
    extern __shared__ int TAB_SM[];

    reductionIntraThread(TAB_SM, ptrTabIn, lenght);

    __syncthreads();

    reductionInterBlock(TAB_SM, ptrHistogrammeGM);
    }

__device__ void reductionIntraThread(int* TAB_SM, int* ptrTabIn, uint lenght)
    {
    const int NB_THREAD=Indice2D::nbThread();
    const int TID=Indice2D::tid();
    const int TIDLocal = Indice1D::tidLocal();

    int s = TID;

    while(s<lenght)
	{

	int value = ptrTabPixelsGM[s];
	int* adresse = &TAB_SM[value];
	atomicAdd(adresse, 1);

	s += NB_THREAD;
	}
    }

__device__ void reductionInterBlock(int* TAB_SM, int* ptrHistogrammeGM)
    {
    if (Indice2D::tidLocal() == 0)
	{
	for (int i = 0; i < 256; i++)
	    {
		ptrHistogrammeGM[i] = TAB_SM[i];
	    }
	}
    }
