#pragma once

#include <math.h>
#include "MathTools.h"

#include "Calibreur_CPU.h"
#include "ColorTools_CPU.h"
using namespace cpu;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

class FractaleMath
    {

    public:

	FractaleMath(uint n) :
		calibreur(Interval<float>(0, n), Interval<float>(0, 1))
	    {
	    this->n = n;
	    }

	virtual ~FractaleMath()
	    {
	    // rien
	    }

    public:

	virtual intf(float x, float y ) = 0;

   	void colorXY(uchar4* ptrColor, float x, float y)
   	    {
   	    float z = f(x, y);

   	    if(z != n){
   		calibreur.calibrer(z);
   		float hue01 = z;
   		ColorTools::HSB_TO_RVB(hue01, ptrColor); // update color
   	    }else{
   		ptrColor->x = 0;
   		ptrColor->y = 0;
   		ptrColor->z = 0;
   	    }

   	    ptrColor->w = 255; // opaque
   	    }

       private:

   	int f(float x, float y)
   	    {
   		float a = 0;
   		float b = 0;
   		float copyA = 0;
   		int i = 0;

   		do{
   		    i++;
   		    copyA = a;
   		    a = (a*a-b*b)+x;
   		    b = 2.0f*copyA*b+y;
   		}
   		while( a*a+b*b < 4.0f && i < n );

   		return i;
   	    }

   	/*--------------------------------------*\
   	|*		Attributs		*|
   	 \*-------------------------------------*/

       private:

   	// Input
   	uint n;

   	// Tools
   	Calibreur<float> calibreur;
    };

#endif 

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
