
#include "Indice1D.h"
#include "cudaTools.h"
#include "../nbSlice.h"
#include <stdio.h>
#include "reductionADD.h"

static __device__ void reductionInterThread(float* ptrDevResult, int nbSlice);

__global__ void slice(float* ptrDevResult, int nbSlice)
    {
    extern __shared__ float tab_SM[];
    reductionInterThread(tab_SM, nbSlice);
    __syncthreads();
    reductionADD<float>(tab_SM, ptrDevResult);
    }

__device__
void reductionInterThread(float* tab_SM, int nbSlice)
    {
    const int TID_LOCAL = Indice1D::tidLocal();
    const int NB_THREAD_LOCAL = Indice1D::nbThread();

    int s = TID_LOCAL;
    while (s < nbSlice)
    {
	s += NB_THREAD_LOCAL;
    }
    tab_SM[TID_LOCAL] = 1;
    }
