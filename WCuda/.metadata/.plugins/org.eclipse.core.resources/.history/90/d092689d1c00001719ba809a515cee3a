#pragma once

#include "cudaType_CPU.h"
#include "Variateur_CPU.h"
#include "Animable_I_CPU.h"

#include "math/MandelbrotMathH.h"
using namespace cpu;

using namespace cpu;


class Fractale: public Animable_I<uchar4>
    {

      public:

	    Fractale(uint w, uint h, uint dt,  const DomaineMath& domaineMath);

	    virtual ~Fractale(void);

     	/*-------------------------*\
     	|*   Override Animable_I   *|
     	 \*------------------------*/

     	/**
     	 * Call periodicly by the api
     	 */
     	virtual void processEntrelacementOMP(uchar4* ptrTabPixels, uint w, uint h, const DomaineMath& domaineMath);

     	/**
     	 * Call periodicly by the api
     	 */
     	virtual void processForAutoOMP(uchar4* ptrTabPixels, uint w, uint h, const DomaineMath& domaineMath);

     	/**
     	 * Call periodicly by the api
     	 */
     	virtual void animationStep();

         private:

     	/**
     	 * i in [0,h[
     	 * j in [0,w[
     	 *
     	 * code commun a:
     	 * 	- entrelacementOMP
     	 * 	- forAutoOMP
     	 */
     	void workPixel(uchar4* ptrColorIJ, int i, int j, const DomaineMath& domaineMath, MandelbrotMathH* ptrDamierMath);

     	/*--------------------------------------*\
     	|*		Attribut		*|
     	 \*-------------------------------------*/

         private:

     	// Inputs
     	uint n;

     	// Tools
     	Variateur<int> variateurAnimation;
    };

